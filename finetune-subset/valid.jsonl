{"messages": [{"content": "You are a code autocomplete agent. Users will input partial code snippets, and you will autocomplete the code based on the provided snippet.", "role": "system"}, {"content": "def get_raw_blast(pdb_id, output_form='HTML', chain_id='A'): '''Look up full BLAST page for a given PDB ID get_blast() uses this function internally Parameters ---------- pdb_id : string A 4 character string", "role": "user"}, {"content": "<code>giving a pdb entry of interest chain_id : string A single character designating the chain ID of interest output_form : string TXT, HTML, or XML formatting of the outputs Returns ------- out : OrderedDict An ordered dictionary object corresponding to bare xml ''' url_root = 'http://www.rcsb.org/pdb/rest/getBlastPDB2?structureId=' url = url_root + pdb_id + '&chainId='+ chain_id +'&outputFormat=' + output_form req = urllib.request.Request(url) f = urllib.request.urlopen(req) result = f.read() result = result.decode('unicode_escape') assert result return result</code>", "role": "assistant"}]}
{"messages": [{"content": "You are a code autocomplete agent. Users will input partial code snippets, and you will autocomplete the code based on the provided snippet.", "role": "system"}, {"content": "def _on_interface_closed(self, success, result, failure_reason, context, next_characteristic=None): \"\"\"Callback function called when the notification related to an interface has been disabled. It is executed in the baBLE working thread: should not be blocking. Args: success (bool): A bool indicating that the operation is successful or not result (dict): Information (if successful) failure_reason (any): An object indicating the reason why the operation is not successful (else None) context (dict): The connection context next_characteristic (bable_interface.Characteristic): If not None, indicate another characteristic to disable notification. \"\"\" if not success: self.connections.finish_operation(context['connection_id'], False, failure_reason) return if next_characteristic is not None: self.bable.set_notification( enabled=False, connection_handle=context['connection_handle'],", "role": "user"}, {"content": "<code>characteristic=next_characteristic, on_notification_set=[self._on_interface_closed, context], timeout=1.0, sync=False ) else: self.connections.finish_operation(context['connection_id'], True, None)</code>", "role": "assistant"}]}
{"messages": [{"content": "You are a code autocomplete agent. Users will input partial code snippets, and you will autocomplete the code based on the provided snippet.", "role": "system"}, {"content": "def create(state, host, ctid, template=None): ''' Create OpenVZ containers. + ctid: CTID of the container to create ''' # Check we", "role": "user"}, {"content": "<code>don't already have a container with this CTID current_containers = host.fact.openvz_containers if ctid in current_containers: raise OperationError( 'An OpenVZ container with CTID {0} already exists'.format(ctid), ) args = ['{0}'.format(ctid)] if template: args.append('--ostemplate {0}'.format(template)) yield 'vzctl create {0}'.format(' '.join(args))</code>", "role": "assistant"}]}
{"messages": [{"content": "You are a code autocomplete agent. Users will input partial code snippets, and you will autocomplete the code based on the provided snippet.", "role": "system"}, {"content": "def _run_exitfuncs(): \"\"\"run any registered", "role": "user"}, {"content": "<code>exit functions _exithandlers is traversed in reverse order so functions are executed last in, first out. \"\"\" while _exithandlers: func, targs, kargs = _exithandlers.pop() func(*targs, **kargs)</code>", "role": "assistant"}]}
{"messages": [{"content": "You are a code autocomplete agent. Users will input partial code snippets, and you will autocomplete the code based on the provided snippet.", "role": "system"}, {"content": "def parse_cmdline(argparser_): \"\"\" Parse the command line. This tests for any required args\"\"\" opts = argparser_.parse_args() if not opts.server: argparser_.error('No WBEM server specified') return None return", "role": "user"}, {"content": "<code>opts</code>", "role": "assistant"}]}
{"messages": [{"content": "You are a code autocomplete agent. Users will input partial code snippets, and you will autocomplete the code based on the provided snippet.", "role": "system"}, {"content": "def elapsed_time(self): \"\"\"To know the duration of the function. This property might return None if the function is still running. \"\"\" if self._end_time: elapsed_time = round(self._end_time", "role": "user"}, {"content": "<code>- self._start_time, 3) return elapsed_time else: return None</code>", "role": "assistant"}]}